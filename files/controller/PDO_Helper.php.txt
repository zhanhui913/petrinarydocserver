<?php
$root = $_SERVER['DOCUMENT_ROOT'];
require_once $root . '/../sys/controller/PDO_Adapter.php';

/**
 * PDO Class that handles qeury building based on input parameters
 */
class PDOHelper{

    /**
     * A instance of PDOAdapter
     */
    private $adapter;

    /**
     * On construction create a new PDOAdapter
     */
    public function __construct() {
        $this->adapter = new PDOAdapter();
    }


    /**************************************************************************
    *
    *    UUID Methods
    *
    /**************************************************************************/

    /**
     * Generates a v4 UUID
     * @return String a v4 UUID
     */
    public static function v4(){
        return sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
 
        // 32 bits for "time_low"
        mt_rand(0, 0xffff), mt_rand(0, 0xffff),
 
        // 16 bits for "time_mid"
        mt_rand(0, 0xffff),
 
        // 16 bits for "time_hi_and_version",
        // four most significant bits holds version number 4
        mt_rand(0, 0x0fff) | 0x4000,
 
        // 16 bits, 8 bits for "clk_seq_hi_res",
        // 8 bits for "clk_seq_low",
        // two most significant bits holds zero and one for variant DCE1.1
        mt_rand(0, 0x3fff) | 0x8000,
 
        // 48 bits for "node"
        mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff)
        );
    }

    /**************************************************************************
    *
    *    Admin Methods
    *
    /**************************************************************************/
    
    /** 
     * Checks if the provided admin email is valid.
     * @param String $p_email Admin email address
     * @return Array $result Returns email, password & salt if valid, else null
     */
    public function checkAdminLogin($p_email){
        $stmt = $this->adapter->conn->prepare(
            "SELECT pass,salt,username,email ".
            "FROM ADMIN ".
            "WHERE email=?;");

        $stmt->bindParam(1,$p_email);
        $result = null;
        try{
            $result = $this->adapter->executeFetchPrepared($stmt)[0];
        }catch(PDOException $e){
            return null;
        }catch(ErrorException $e) {
            return null;
        }
        
        return $result;
    }

    /**************************************************************************
    *
    *    Vet Methods
    *
    /**************************************************************************/

   /** 
    * @deprecated
    * Checks if the provided vet email is valid.
    * @param String $p_email Vet email address
    * @return Array $result Returns email, password & salt if valid, else null
    */
    public function checkVetEmail($p_email){
        $stmt = $this->adapter->conn->prepare(
            "SELECT email,pass,salt ".
            "FROM VET ".
            "WHERE email=?;");
        $stmt->bindParam(1,$p_email);
        $result = null;
        try{
            $result = $this->adapter->executeFetchPrepared($stmt)[0];
        }catch(PDOException $e){
            return null;
        }catch(ErrorException $e) {
            return null;
        }
        
        return $result;
    }

    /**
     * @deprecated
     * Uses the PDO_Adapter to get the info for a specific vet by email.
     * @param String $p_email Vet email address
     * @return Array $result
     */
    public function getVetInfoQuery($p_email){
        $stmt = $this->adapter->conn->prepare(
            "SELECT * FROM VETS WHERE email=?");
        $stmt->bindParam(1,$p_email);
       
        $result = null;
        try{
              $result = $this->adapter->executeFetchPrepared($stmt)[0];
        }catch(PDOException $e){
            return null;
        }
        
        return $result;
    }

    /**************************************************************************
    *
    *    Owner Methods
    *
    /**************************************************************************/

    /**
     * This function checks if the given owner email or owner useranme is valid
     * @param String $p_id Can be either email or username
     * @return Array $result Returns email,passowrd,salt,username and active status           
     */
    public function checkOwnerId($p_id){
        $stmt = $this->adapter->conn->prepare(
            "SELECT pass,salt,active,email,username ".
            "FROM OWNER ".
            "WHERE email=? OR username=?;");
        $stmt->bindParam(1,$p_id);
        $stmt->bindParam(2,$p_id);
        $result = null;
        try{
            $result = $this->adapter->executeFetchPrepared($stmt)[0];
        }catch(PDOException $e){
            return null;
        }catch(ErrorException $e) {
            return null;
        }

        return $result;
    }

    /**
     * Create a new owner through PDO_Adpater.
     * THE RETURN VALUES NEED TO BE REFACTORED
     * @param String $p_email Owner's email
     * @param String $p_password Owner's password
     * @param String $p_salt Salt
     * @param String $p_username Owner's username
     * @param String $p_picPath The path of default profile picture
     * @return boolean $result Returns true when the owner is created successfully,else false
     */
    public function createOwner($p_email,$p_password,$p_salt,$p_username,$p_picPath){
        $stmt = $this->adapter->conn->prepare(
                "INSERT INTO OWNER(".
                "email,pass,salt,username,pic_path) ".
                "VALUES".
                "(?,".
                "?,".
                "?,".
                "?,".
                "?);");
        $stmt->bindParam(1,$p_email);
        $stmt->bindParam(2,$p_password);
        $stmt->bindParam(3,$p_salt);
        $stmt->bindParam(4,$p_username);
        $stmt->bindParam(5,$p_picPath);
        $result=null;
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0) {
            return true;
        }

        return false;
    }

    /**
     * Get the email and username for a specific owner by email
     * @param String $p_email email
     * @return Array $result returns an array with email and username, null otherwise
     */
    public function getOwnerInfo($p_email){

        $stmt = $this->adapter->conn->prepare(
                "SELECT email,username,pic_path,active,net_points ".
                "FROM OWNER ".
                "WHERE email=?;");
        $stmt->bindParam(1,$p_email);
        $result=null;
        try{
            $result = $this->adapter->executeFetchPrepared($stmt)[0];
        }catch(PDOException $e){
            return null;
        }catch(ErrorException $e) {
            return null;
        }
        return $result;
    }

    /**
     * Get the email and username for a specific owner by email/username
     * @param String $p_id Username The username/email of the owner.
     * @return Array $return Returns an array with email and username , null otherwise
     */
    public function getOwnerById($p_id){

        $stmt = $this->adapter->conn->prepare(
                "SELECT email,username,pic_path,active,net_points ".
                "FROM OWNER ".
                "WHERE email=? OR username=?;");
        $stmt->bindParam(1,$p_id);
        $stmt->bindParam(2,$p_id);
        $result=null;
        try{
            $result = $this->adapter->executeFetchPrepared($stmt)[0];
        }catch(PDOException $e){
            return null;
        }catch(ErrorException $e) {
            return null;
        }
        return $result;
    }
    
    /**
     * Update the password for a specific pet owner by email.
     * @param String $p_email Owner email
     * @param String $p_password Owner's new password
     * @param String $p_salt Owner's salt
     * @return boolean $result Returns true when is updated successfully, false otherwise.
     */
    public function updateOwnerPassword($p_email,$p_password,$p_salt){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE OWNER ".
            "SET pass = ?,salt = ? ".
            "WHERE email = ?;");
        $stmt->bindParam(1,$p_password);
        $stmt->bindParam(2,$p_salt);
        $stmt->bindParam(3,$p_email);
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0) {
            return true;
        }

        return false;
    }

    /** 
     * Update the given owner's pic_path.
     * @param String $p_email The id of the owner who's pic_path is to be updated.
     * @param String $p_pic_path The pic_path value to replace the old.
     * @return boolean $result Return true on success, false otherwise.
     */
    public function updateOwnerAvatar($p_email, $p_pic_path) {
        $stmt = $this->adapter->conn->prepare(
            "UPDATE OWNER ".
            "SET pic_path = ? ".
            "WHERE email = ?;");
        $stmt->bindParam(1,$p_pic_path);
        $stmt->bindParam(2,$p_email);
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0) {
            return true;
        }
        return false;        
    }
    
    /**
     * Update the username for a specific pet owner by email.
     * @param String $p_email Owner email
     * @param String $p_username Owner username
     * @return boolean $result Returns true when is updated successfully, false otherwise.
     */
    public function updateOwnerUsername($p_email,$p_username){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE OWNER ".
            "SET username = ? ".
            "WHERE email = ?;");
        $stmt->bindParam(1,$p_username);
        $stmt->bindParam(2,$p_email);
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0) {
            return true;
        }

        return false;

    }

    /**
     * Update the account status for a specific pet owner by email.
     * @param String $p_email Owner email.
     * @param boolean $p_active Owner's active status. 
     * @return boolean $result Returns true when is updated successfully, false otherwise.
     */
    public function updateOwnerActiveStatus($p_email,$p_active){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE OWNER ".
            "SET active = ? ".
            "WHERE email = ?;");
        $stmt->bindParam(1,$p_active);
        $stmt->bindParam(2,$p_email);
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0) {
            return true;
        }

        return false;

    }
 
   /**************************************************************************
    *
    *    Pet Methods
    *
    /**************************************************************************/
    
    /** 
     * Uses the PDO_Adapter to get the info for a specific 
     * pet by pet id.
     * @param String $p_pet_id Pet id
     * @return Array $result Returns an array of pet info, null otherwise.
     */
    public function getPetInfoQuery($p_pet_id){
        $stmt = $this->adapter->conn->prepare(
            "SELECT P.*,SP.name AS species_name,".
            "DATE_FORMAT(NOW(), '%Y') - DATE_FORMAT(birthday, '%Y') - (DATE_FORMAT(NOW(), '00-%m-%d') < DATE_FORMAT(birthday, '00-%m-%d')) AS age ".
            "FROM PET P,SPECIES SP ".
            "WHERE P.pet_id = ? AND P.species_id = SP.id ;");
        $stmt->bindParam(1,$p_pet_id);

        $result = null;
        try{
             $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        
        return $result;
    }

    /** 
     * Get all the active pet id for a specific owner.
     * @param String $p_email Owner email
     * @return Array $result Returns an array of pet id, null otherwise.
     */
    public function getAllActivePetId($p_email){
        $stmt = $this->adapter->conn->prepare(
            "SELECT pet_id ".
            "FROM PET ".
            "WHERE active = 1 AND owner_id = ?;");
        $stmt->bindParam(1,$p_email);
        
        $result = null;
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        return $result;
    }

    /** 
     * Get all the pet id for a specific owner.
     * @param String $p_email Owner email
     * @return Array $result Returns an array of pet id, null otherwise.
     */
    public function getAllPetId($p_email){
        $stmt = $this->adapter->conn->prepare(
            "SELECT pet_id ".
            "FROM PET ".
            "WHERE owner_id = ?;");
        $stmt->bindParam(1,$p_email);
        
        $result = null;
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        return $result;
    }

    /**
     * Update a pet by using pet id and an array of pet details.
     * @param String $p_petId Pet id
     * @param Array $p_pet An array of pet details
     * @return boolean $result Returns true when is updated successfully, false otherwise.
     */
    public function updatePet($p_petId,$p_pet) {
        $stmt = $this->adapter->conn->prepare(
            "UPDATE PET SET ".
            "name = ?, ".
            "birthday = ?, ".
            "sex = ?, ".
            "colour = ?, ".
            "breed = ?, ".
            "species_id = ?, ".
            "isNeutered = ?, ".
            "clinic_id = ?, ".
            "active = ? ".
            "WHERE pet_id = ?;");
        $stmt->bindParam(1,$p_pet['name']);
        $stmt->bindParam(2,$p_pet['birthday']);
        $stmt->bindParam(3,$p_pet['sex']);
        $stmt->bindParam(4,$p_pet['colour']);
        $stmt->bindParam(5,$p_pet['breed']);
        $stmt->bindParam(6,$p_pet['species']['id']);
        $stmt->bindParam(7,$p_pet['isNeutered']);
        $stmt->bindParam(8,$p_pet['clinic_id']);
        $stmt->bindParam(9,strval($p_pet['active']));
        $stmt->bindParam(10,$p_petId);

        $result = null;
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0) {
            return true;
        }

        return false;
    }

    /**
     * Create pet with name, pet id, owner id, sex, age, colour, breed, species, 
     * isNeutred and net points information 
     * @param Array $p_pet Pet details
     * @return boolean $result Returns true if inserted, false otherwise
     */
    public function addPet($p_pet) {
        $stmt = $this->adapter->conn->prepare(
            "INSERT INTO PET VALUES(".
            "?,".
            "?,".
            "?,".
            "?,".
            "?,".
            "?,".
            "?,".
            "?,".
            "?,".
            "?,".
            "?,".
            "?);");
        $stmt->bindParam(1,$p_pet['name']);
        $stmt->bindParam(2,$p_pet['pet_id']);
        $stmt->bindParam(3,$p_pet['owner_id']);
        $stmt->bindParam(4,$p_pet['birthday']);
        $stmt->bindParam(5,$p_pet['sex']);
        $stmt->bindParam(6,$p_pet['colour']);
        $stmt->bindParam(7,$p_pet['breed']);
        $stmt->bindParam(8,$p_pet['species_id']);
        $stmt->bindParam(9,$p_pet['isNeutered']);
        $stmt->bindParam(10,$p_pet['net_points']);
        $stmt->bindParam(11,$p_pet['clinic_id']);
        $stmt->bindParam(12,$p_pet['active']);
        $result=null;
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        if($result > 0) {
            return $p_pet['pet_id'];
        }

        return null;
    }

    /**
     * Delete a pet from an owner's account by using email and pet id. (Disable active bit)
     * @param String $p_email Owner email
     * @param Stirngs $p_petId Pet id
     * @return boolean Returns true if is deleted successfully,else false
     */
    public function deletePet($p_email,$p_petId){
        $stmt =  $this->adapter->conn->prepare(
            "UPDATE PET SET ".
            "active = 0 ".
            "WHERE owner_id = ? AND pet_id = ?;"
        );
        
        $stmt->bindParam(1,$p_email);
        $stmt->bindParam(2,$p_petId);

        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0) {
            return true;
        }

        return false;
    }

    /**
     * Get all pets (Active & Inactive)
     * @return Array Returns an array of all pets
     */
    public function getAllPets(){
        $stmt = $this->adapter->conn->prepare(
            "SELECT * ".
            "FROM PET ;");
        try{
             $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        
        return $result;
    }

    /**
     * Get all active pets only
     * @return Array Returns an array of active pets
     */
    public function getAllActivePets(){
        $stmt = $this->adapter->conn->prepare(
            "SELECT * ".
            "FROM PET ".
            "WHERE active = 1;");
        try{
             $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        
        return $result;   
    }



    /**************************************************************************
    *
    *    Interest Records Methods
    *
    /**************************************************************************/

    /**
     * Returns all interest records based on pet id.
     * @param String $p_pet_id Pet id
     * @return Array $result Returns an array of interest records based on pet id
     */
    public function getInterestRecord($p_pet_id){
        $stmt = $this->adapter->conn->prepare(
            "SELECT * ".
            "FROM INTEREST_RECORD ".
            "WHERE pet_id=?;");
        $stmt->bindParam(1,$p_pet_id); 
        $result = null;

        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        
        return $result;   
    }

    /** 
    * Use given pet id and interest id to add a interest record.
    * @param String $p_pet_id Pet id
    * @param Integer $p_interest_id Interest id
    * @return String $result Concatenation of both parametersif successfully inserted, null otherwise  
    */
    public function addInterestRecord($p_pet_id,$p_interest_id){
        $stmt = $this->adapter->conn->prepare(
            "INSERT INTO INTEREST_RECORD VALUES(".
            "?,".
            "?);");
        $stmt->bindParam(1,$p_pet_id);
        $stmt->bindParam(2,$p_interest_id);
        
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return null;
        }

        if($result > 0) {
            return $p_pet_id."_".$p_interest_id;
        }

        return null;    
    }
        
    /**
     * Delete a interest record based on pet id and pet interest id
     * @param String $p_pet_id Pet id
     * @param String $p_interest_id Interest id
     * @return Boolean $result Returns true if successful, false otherwise
     */
    public function deleteInterestRecord($p_pet_id,$p_interest_id){
        $stmt = $this->adapter->conn->prepare(
            "DELETE FROM INTEREST_RECORD WHERE ".
            "pet_id = ? ".
            "AND ".
            "interest_id = ?;");
        $stmt->bindParam(1,$p_pet_id);
        $stmt->bindParam(2,$p_interest_id);
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }

        if($result > 0){
            return true;
        }

        return false;
    }

    /**************************************************************************
    *
    *    Interest Methods
    *
    /**************************************************************************/

    /**
     * Get all interest objects
     * @return Array $result Array of Interest Model Objects
     */
    public function getAllInterest(){
        $stmt = $this->adapter->conn->prepare(
            "SELECT I.interest_id, I.interest_description, I.src,I.category_id, C.description ".
            "FROM INTEREST I left join CATEGORY C ".
            "ON I.category_id = C.category_id;");
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        return $result;
    }

    /**
     * Get a specific interest object
     * @param String $p_interest_id The Interest ID
     * @return Interest $result Interest Model Object
     */
    public function getInterest($p_interest_id){
        $stmt = $this->adapter->conn->prepare(
            "SELECT I.interest_id, I.interest_description, I.src,I.category_id, C.description ".
            "FROM INTEREST I left join CATEGORY C ".
            "ON I.category_id = C.category_id ".
            "WHERE I.interest_id=?;");
        $stmt->bindParam(1,$p_interest_id);
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;    
        }
        return $result[0];
    }

    /**
     * Adds an interest into the db
     * @param String $p_interest_name The Interest name
     * @param String $p_category_id The category ID
     * @param String $p_interest_src Path to location at which the image associated with this interest is stored.
     * @return String $uuid Returns a UUID if successful, else returns null
     */
    public function addInterest($p_interest_name,$p_category_id,$p_interest_src){
        $uuid = $this->v4();
        
        $stmt = $this->adapter->conn->prepare(
        "INSERT INTO INTEREST(interest_description,category_id,src,interest_id) ".
        "VALUES( ".
            "?,".
            "?,".
            "?,".
            "?);");
        $stmt->bindParam(1,$p_interest_name);
        $stmt->bindParam(2,$p_category_id);
        $stmt->bindParam(3,$p_interest_src);
        $stmt->bindParam(4,$uuid);
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        //If successfully inserted, return the UUID, else return null
        if($result > 0) {
            return $uuid;
        }
        return null;  
    }

    /**
     * Deletes an interest from the database
     * @param String $p_interest_id The interest ID
     * @return boolean $result Returns true if deleted successfully, false otherwise
     */
    public function deleteInterest($p_interest_id){
        $stmt = $this->adapter->conn->prepare(
            "DELETE FROM INTEREST WHERE ".
            "interest_id = ?;");
        $stmt->bindParam(1,$p_interest_id);
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0){
            return true;
        }
        return false;
    }

    /**
     * Update an interest description
     * @param String $p_interest_id The interest ID
     * @param String $p_interest_description Interest description
     * @return boolean $result Returns true if deleted successfully, false otherwise
     */
    public function editInterestDescription($p_interest_id,$p_interest_description){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE INTEREST SET INTEREST_DESCRIPTION=? ".
            "WHERE INTEREST_ID = ?");
        $stmt->bindParam(1,$p_interest_description);
        $stmt->bindParam(2,$p_interest_id);
        
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0){
            return true;
        }
        return false;
    }

    /**
     * Update an interest src
     * @param String $p_interest_id The interest ID
     * @param String $p_interest_src The interest Src
     * @return boolean $result Returns true if updated successfully, false otherwise
     */
    public function editInterestSrc($p_interest_id,$p_interest_src){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE INTEREST SET SRC=? ".
            "WHERE INTEREST_ID = ?");
        $stmt->bindParam(1,$p_interest_src);
        $stmt->bindParam(2,$p_interest_id);
        
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0){
            return true;
        }
        return false;
    }

    /**
     * Update an interest category
     * @param int $p_interest_id The interest ID
     * @param String $p_interest_category Name of the interest category
     * @return boolean $result Returns true if updated successfully, false otherwise
     */
    public function editInterestCategory($p_interest_id,$p_interest_category){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE INTEREST SET CATEGORY_ID=? ".
            "WHERE INTEREST_ID = ?");
        $stmt->bindParam(1,$p_interest_category);
        $stmt->bindParam(2,$p_interest_id);
        
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }

        if($result > 0){
            return true;
        }
        return false;

    }

    /**************************************************************************
    *
    *    Category Methods
    *
    /**************************************************************************/
    
    /**
     * Get all category objects
     * @return Array[Category] $result Array of Category Model Objects
     */
    public function getAllCategory(){
        $stmt = $this->adapter->conn->prepare(
            "SELECT * ".
            "FROM CATEGORY;");
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        return $result;
    }

    /**
     * sGet a specific category object
     * @param String $p_category_id The Category ID
     * @return Category $result Category Model Object
     */
    public function getCategory($p_category_id){
        $stmt = $this->adapter->conn->prepare(
        "SELECT * ".
        "FROM CATEGORY ".
        "WHERE category_id=?;");
        $stmt->bindParam(1,$p_category_id,PDO::PARAM_INT);
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
            if (!isset($result[0])) {
                return null;
            }
        }catch(PDOException $e){
            return null;    
        }

        return $result[0];
    }

    /**
     * Adds a category into the db
     * @param String $p_category_description The category description
     * @return String $uuid Returns a UUID if successful, else returns null
     */
    public function addCategory($p_category_description){
	    $uuid = $this->v4();
        $stmt = $this->adapter->conn->prepare(
            "INSERT INTO CATEGORY(description,category_id) VALUES(?,?);");
        $stmt->bindParam(1,$p_category_description);
        $stmt->bindParam(2,$uuid);
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }

        //If successfully inserted, return UUID, else return null
        if($result > 0) {
            return $uuid;
        }else{
            return null; 
        }
    }

    /**
     * Deletes a category from the db
     * @param int $p_category_id The category ID
     * @return Boolean $result Returns true if deleted successfully, false otherwise
     */
    public function deleteCategory($p_category_id){
         $stmt = $this->adapter->conn->prepare(
            "DELETE FROM CATEGORY WHERE ".
            "category_id = ?;");
        $stmt->bindParam(1,$p_category_id);
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }

        if($result > 0){
            return true;
        }

        return false;
    }


    /**************************************************************************
    *
    *    Picture Methods
    *
    /**************************************************************************/

    /**
     * Get all picture info based on pet ID
     * @param String $p_pet_id Pet ID
     * @return Array $result Returns an Array of pictures based on pet ID
     */
    public function getAllPictureInfo($p_pet_id){
        $stmt = $this->adapter->conn->prepare(
            "SELECT * ".
            "FROM PICTURES ".
            "WHERE pet_id=?;");
        $stmt->bindParam(1,$p_pet_id);
        $result = null;
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        
        return $result; 
    }

    /**
     * Insert a picture's info into the database
     * @param String $p_pet_id The pet ID
     * @param String $p_path The picture path
     * @param String $p_description The description of the picture
     * @return String $pic_id Returns picture ID if added successfully, else null
     */
    public function addPicture($p_pet_id,$p_path,$p_description){
        $time = time();

        //Concat time witht pet ID = pic ID
        $pic_id = $p_pet_id."_".$time;
        
        //Check if the pet has six or more pictures
        if($this->getPictureCount($p_pet_id) >= 6){
            return null;
        }

        //Insert into db
        $stmt = $this->adapter->conn->prepare(
            "INSERT INTO PICTURES".
            "(pet_id,pic_path,description,pic_id) ".
            "VALUES(".
            "?,".
            "?,".
            "?,".
            "?);");
        
        $stmt->bindParam(1,$p_pet_id);
        $stmt->bindParam(2,$p_path);
        $stmt->bindParam(3,$p_description);
        $stmt->bindParam(4,$pic_id);

        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return null;
        }

        return $pic_id;
    }

    /** 
     * Update picture description with information if the picture is found
     * @param Array $p_picture Picture details
     * @return boolean $result Returns true if updated successfully, else false
     */
    public function updatePictureDescription($p_picture){

        $stmt = $this->adapter->conn->prepare(
            "UPDATE PICTURES ".
            "SET description = ? ".
            "WHERE pet_id = ? ".
            "AND ".
            "pic_id = ?;");
        $stmt->bindParam(1,$p_picture['description']);
        $stmt->bindParam(2,$p_picture['petId']);
        $stmt->bindParam(3,$p_picture['picId']);

        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0) {
            return true;
        }
        return false;
    }
    
    /**
     * Delete a picture through pet ID and picture ID
     * @param String $p_petId Pet ID
     * @param String $p_picId Picture ID
     * @return boolean $result Returns true if updated, false otherwise
     */
    public function deletePicture($p_petId,$p_picId){
        $stmt = $this->adapter->conn->prepare(
            "DELETE FROM PICTURES ".
            "WHERE pet_id = ? ".
            "AND ".
            "pic_id = ?;");
        $stmt->bindParam(1,$p_petId);
        $stmt->bindParam(2,$p_picId);
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0) {
            return true;
        }
        return false;
    }

    /**
     * Increment the likes count for a picture
     * @param String $p_pet_id Pet ID
     * @param String $p_pic_id Pic ID
     * @return boolean $result Returns true or false depending on success
     */
    public function updatePictureLikes($p_pet_id, $p_pic_id) {
        $stmt = $this->adapter->conn->prepare(
            "UPDATE PICTURES SET likes = likes + 1 ".  
            "WHERE pic_id=? and pet_id=?");
        $stmt->bindParam(1,$p_pic_id);
        $stmt->bindParam(2,$p_pet_id);
        $result=null;
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0) {
            return true;
        }

        return false;
    }

     /**
      * Increment the views count for a picture
      * @param  String $p_pet_id Pet ID
      * @param  String $p_pic_id Pic ID
      * @return boolean True or False depending on success
      */
    public function updatePictureViews($p_pet_id, $p_pic_id) {
        $stmt = $this->adapter->conn->prepare(
            "UPDATE PICTURES SET views = views + 1 ".  
            "WHERE pic_id=? and pet_id=?");
        $stmt->bindParam(1,$p_pic_id);
        $stmt->bindParam(2,$p_pet_id);

        $result=null;
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0) {
            return true;
        }

        return false;
    }

    /**
      * Get the current number of pictures for a pet
      * @param  String $p_pet_id Pet ID
      * @return Int Picture Count
      */
    public function getPictureCount($p_pet_id) {
        $stmt = $this->adapter->conn->prepare(
            "SELECT COUNT(*) as count FROM PICTURES ".  
            "WHERE pet_id=?");
        $stmt->bindParam(1,$p_pet_id);

        $result=null;
        try{
            $result = (int)$this->adapter->executeFetchPrepared($stmt)[0]['count'];
            return $result;
        }catch(PDOException $e){
            return null;
        }
        return null;
    }

    /**************************************************************************
    *
    *    Clinic Methods
    *
    /**************************************************************************/

    /**
     * Get all the clinic information from DB
     * @return Array $result List of clinic details
     */
    public function getAllClinicInfo(){
        $stmt = $this->adapter->conn->prepare("SELECT * FROM CLINIC");  
        $result = null;
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        return $result;
    }

	/**
     * Get a clinic info by id
     * @return Array $result List of clinic details
     */
    public function getClinicById($p_clinic_id){
        $stmt = $this->adapter->conn->prepare("SELECT * FROM CLINIC WHERE clinic_id = ? OR email = ?"); 
        $stmt->bindParam(1, $p_clinic_id);
        $stmt->bindParam(2, $p_clinic_id);
        $result = null;
        try{
            $result = $this->adapter->executeFetchPrepared($stmt)[0];
        }catch(PDOException $e){
            return null;
        }
        return $result;
    }


	/**
     * Get a clinics information from the DB
     * @return Array $result List of clinic details
     */
    public function getHomeClinic($p_pet_id){
        $stmt = $this->adapter->conn->prepare("SELECT c.* FROM CLINIC c JOIN PET p on c.clinic_id = p.clinic_id WHERE p.pet_id = ?");  
	$stmt->bindParam(1, $p_pet_id);
        $result = null;
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        if ($result != null) return $result[0];
        return null;    
    }


    /**
     *
     *
     */
    public function updateClinicPassword($p_clinic_array) {
        $stmt = $this->adapter->conn->prepare("UPDATE CLINIC SET ".
        "pass = ?, " .
        "salt = ? " .
        "WHERE clinic_id = ?;");
        $stmt->bindParam(1, $p_clinic_array['password']);
        $stmt->bindParam(2, $p_clinic_array['salt']);
        $stmt->bindParam(3, $p_clinic_array['clinic_id']);

        $result=null;
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0) {
            return true;
        }
        return false;
    }

    /**
     * Update clinic info
     * @param Object $p_clinic_array A clinic array
     * @return Boolean $result Returns true if successful, false otherwise
     */
    public function updateClinicInfo($p_clinic_array){ 

        $stmt = $this->adapter->conn->prepare("UPDATE CLINIC SET ".
        "name = ?, " . 
        "address = ?, " .
        "city = ?, " .
        "province = ?, " .
        "postal_code = ?, " .
        "latitude = ?, " .
        "longitude = ?, " .
        "email = ?, " .
        "website = ?, " .
        "contact_person = ?, ".
        "phone = ?, " .
        "expiration = ?, " .
        "active = ? " .
        "WHERE clinic_id = ?;");

        $stmt->bindParam(1,$p_clinic_array['name']);
        $stmt->bindParam(2,$p_clinic_array['address']);
        $stmt->bindParam(3,$p_clinic_array['city']);
        $stmt->bindParam(4,$p_clinic_array['province']);
        $stmt->bindParam(5,$p_clinic_array['postal_code']);
        $stmt->bindParam(6,$p_clinic_array['latitude']);
        $stmt->bindParam(7,$p_clinic_array['longitude']);
        $stmt->bindParam(8,$p_clinic_array['email']);
        $stmt->bindParam(9,$p_clinic_array['website']);
        $stmt->bindParam(10,$p_clinic_array['contact_person']);
        $stmt->bindParam(11,$p_clinic_array['phone']);
        $stmt->bindParam(12,$p_clinic_array['expiration']);
        $stmt->bindParam(13,strval($p_clinic_array['active']));
        $stmt->bindParam(14,$p_clinic_array['clinic_id']);

        $result=null;
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0) {
            return true;
        }
        return false;
    }

    /**
     * Update the clinic active bit to 0
     * @param ID $p_clinic_id A clinic Id
     * @return Boolean $result Returns true if successful, false otherwise
     */
    public function deleteClinic($p_clinic_id){ 

        $stmt = $this->adapter->conn->prepare("UPDATE CLINIC SET ".
        "active = 0 " .
        "WHERE clinic_id = ?;");

        $stmt->bindParam(1,$p_clinic_id);

        $result=null;
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0) {
            return true;
        }

        return false;

    }

    /**
     * This function checks if the given clinic email is valid
     * @param String $p_email clinic email
     * @return Array Returns active,password and salt           
     */
    public function checkClinicAccount($p_email){
        $stmt = $this->adapter->conn->prepare(
            "SELECT pass,salt, active ".
            "FROM CLINIC ".
            "WHERE email=?;");
        $stmt->bindParam(1,$p_email);
        $result = null;
        try{
			$ret = $this->adapter->executeFetchPrepared($stmt);
			if (!isset($ret[0])) return null;
			else $result = $ret[0];
        }catch(PDOException $e) {
            return null;
        }catch(ErrorException $e) {
            return null;
        }

        return $result;
    }

    /**
     * Create a new clinic through PDO_Adpater
     * @param Array $p_clinic_array An array of clinic details
     * @return String $result Returns clinic id if is inserted successfully,else false
     */
    public function createClinic($p_clinic_array){
    	$id = $this->v4();
        //Default active is set to 1
        $active = 1;
        $stmt = $this->adapter->conn->prepare("INSERT INTO CLINIC (".
        "name, " . 
        "clinic_id, " .
        "address, " .
        "city, " .
        "province, " .
        "latitude, " .
        "longitude, " .
        "email, " .
        "website, " .
        "contact_person, ".
        "phone , " .
        "active, " .
        "expiration, " .
        "pass, " .
        "salt, " .
        "postal_code) ".
        "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)" .
        ";");
        $stmt->bindParam(1,$p_clinic_array['name']);
        $stmt->bindParam(2,$id);
        $stmt->bindParam(3,$p_clinic_array['address']);
        $stmt->bindParam(4,$p_clinic_array['city']);
        $stmt->bindParam(5,$p_clinic_array['province']);
        $stmt->bindParam(6,$p_clinic_array['latitude']);
        $stmt->bindParam(7,$p_clinic_array['longitude']);
        $stmt->bindParam(8,$p_clinic_array['email']);
        $stmt->bindParam(9,$p_clinic_array['website']);
        $stmt->bindParam(10,$p_clinic_array['contact_person']);
        $stmt->bindParam(11,$p_clinic_array['phone']);
        $stmt->bindParam(12,$active);
        $stmt->bindParam(13,$p_clinic_array['expiration']);
        $stmt->bindParam(14,$p_clinic_array['pass']);
        $stmt->bindParam(15,$p_clinic_array['salt']);
        $stmt->bindParam(16,$p_clinic_array['postal_code']);
        $result=null;
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        if($result > 0) {
            return $id;
        }

        return null;
    }

    /**************************************************************************
    *
    *    Old Pet Owner Methods
    *
    /**************************************************************************/

    /** 
     * @deprecated
     * Update patient owner with information if clinic_id and patient_id is found
     * @param Array $p_patient_owner Patient owner details
     * @return boolean Returns true if updated, false otherwise
     */
    public function updatePatientOwner($p_patient_owner) {
        $stmt = $this->adapter->conn->prepare(
            "UPDATE PATIENT_OWNER SET ".
            "firstname = ?,".
            "lastname = ?,".
            "address = ?,".
            "city = ?,".
            "province = ?,".
            "postal_code = ?,".
            "home_number = ?,".
            "cell_number = ?,".
            "email = ?,".
            "hasOptedIn = ? ".
            "WHERE clinic_id=? and patient_id = ? and owner_id = ?;");
        $stmt->bindParam(1,$p_patient_owner['firstname']);
        $stmt->bindParam(2,$p_patient_owner['lastname']);
        $stmt->bindParam(3,$p_patient_owner['address']);
        $stmt->bindParam(4,$p_patient_owner['city']);
        $stmt->bindParam(5,$p_patient_owner['province']);
        $stmt->bindParam(6,$p_patient_owner['postal_code']);
        $stmt->bindParam(7,$p_patient_owner['home_number']);
        $stmt->bindParam(8,$p_patient_owner['cell_number']);
        $stmt->bindParam(9,$p_patient_owner['email']);
        $stmt->bindParam(10,$p_patient_owner['hasOptedIn']);
        $stmt->bindParam(11,$p_patient_owner['clinic_id']);
        $stmt->bindParam(12,$p_patient_owner['patient_id']);
        $stmt->bindParam(13,$p_patient_owner['owner_id']);
        $result=null;
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0) {
            return true;
        }
        return false;
    }
    /**************************************************************************
    *
    *    Achievement Set Methods
    *
    /**************************************************************************/
    


    public function getAchievementSetPointsForPet($p_pet_id){
        $stmt = $this->adapter->conn->prepare(
            "SELECT sum(IFNULL(AR.points,0)) AS current_points,".
            "sum(A.points) AS total_set_points,".
            "A.set_id FROM ".
            "(SELECT set_id FROM PET P JOIN SPECIES_ACHIEVEMENT_SET SA ON P.species_id = SA.species_id WHERE P.pet_id = ? ) AS SETS ".
            "JOIN ACHIEVEMENT A ON SETS.set_id = A.set_id LEFT JOIN ACHIEVEMENT_RECORD AR ON A.id = AR.achievement_id GROUP BY A.set_id ;");
        $stmt->bindParam(1,$p_pet_id);
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        
        return $result;
    }

    /**
     * Get all species which are elligible for the given achievement set.
     * @param {String} $p_achievementSet_id The id of the achievement set for 
     * which we want to retrieve the species list. 
     * @return Array of rows from species table.
     */
    public function getSpeciesForAchievementSet($p_achievementSet_id) {
        $stmt = $this->adapter->conn->prepare(
            "SELECT s.name, s.id FROM SPECIES AS s, ".
            "SPECIES_ACHIEVEMENT_SET AS a WHERE s.id = a.species_id " .
            "AND a.set_id = ?");
        $stmt->bindParam(1, $p_achievementSet_id);
        try {
            return $this->adapter->executeFetchPrepared($stmt);
        } catch (PDOException $e) {
            return null;
        }
    }

    /** 
     * Get a achievement set based on achievement ID
     * @param String $p_achievement_id The achievement ID
     * @return Array Returns the achievement ID ,else null
     */
    public function getAchievementSet($p_achievement_id){
        $stmt = $this->adapter->conn->prepare("SELECT * ".
            "FROM ACHIEVEMENT_SET ".
            "WHERE id=?;");
        $stmt->bindParam(1,$p_achievement_id);
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        return $result[0];
    }

    /** 
     * Get a list of all the achievement sets
     * @return Array Returns an array of achievementSet info,else null
     */
    public function getAllAchievementSet(){
        $stmt = $this->adapter->conn->prepare("SELECT * ".
            "FROM ACHIEVEMENT_SET ;");
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        return $result;
    }

    /**
     * Adds an achievement set into the db
     * @param String $p_achievementSet_name The achievementSet Name
     * @param String $p_achievementSet_description The achievementSet description
     * @return String $uuid Returns a UUID if successful, else returns null
     */
    public function addAchievementSet($p_achievementSet_name,$p_achievementSet_description){
        $uuid = $this->v4();
        
        $stmt = $this->adapter->conn->prepare(
        "INSERT INTO ACHIEVEMENT_SET(name,description,id) ".
        "VALUES( ".
            "?,".
            "?,".
            "?);");
        $stmt->bindParam(1,$p_achievementSet_name);
        $stmt->bindParam(2,$p_achievementSet_description);
        $stmt->bindParam(3,$uuid);
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        //If successfully inserted, return the UUID, else return null
        if($result > 0) {
            return $uuid;
        }
        return null;  
    }

    /**
     * Deletes an achievementSet from the database
     * @param String $p_achievement_id The achievement ID
     * @return Boolean Returns true if deleted successfully, false otherwise
     */
    public function deleteAchievementSet($p_achievementSet_id){
        
        $stmt = $this->adapter->conn->prepare(
            "UPDATE ACHIEVEMENT set next = null, position = null, total = null WHERE set_id = ?;
            UPDATE ACHIEVEMENT_RECORD set next = null, position = null, total = null WHERE set_id = ?;
            DELETE FROM ACHIEVEMENT_SET WHERE id = ?;");
        $stmt->bindParam(1,$p_achievementSet_id);
        $stmt->bindParam(2,$p_achievementSet_id);
        $stmt->bindParam(3,$p_achievementSet_id);
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0){
            return true;
        }
        return false;
    }

    /**
     * Update an achievementSet description
     * @param String $p_achievementSet_id The achievementSet ID
     * @param String $p_achievementSet_description The achievementSet description
     * @return Boolean Returns true if deleted successfully, false otherwise
     */
    public function editAchievementSetDescription($p_achievementSet_id,$p_achievementSet_description){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE ACHIEVEMENT_SET SET DESCRIPTION=? ".
            "WHERE ID = ?");
        $stmt->bindParam(1,$p_achievementSet_description);
        $stmt->bindParam(2,$p_achievementSet_id);
        
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0){
            return true;
        }
        return false;
    }

   /**
     * Update an achievementSet name
     * @param String $p_achievementSet_id The achievementSet ID
     * @param String $p_achievementSet_name The achievementSet name
     * @return Boolean Returns true if deleted successfully, false otherwise
     */
    public function editAchievementSetName($p_achievementSet_id,$p_achievementSet_name){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE ACHIEVEMENT_SET SET NAME=? ".
            "WHERE ID = ?");
        $stmt->bindParam(1,$p_achievementSet_name);
        $stmt->bindParam(2,$p_achievementSet_id);
        
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0){
            return true;
        }
        return false;
    }


    /**************************************************************************
    *
    *    Achievement Methods
    *
    /**************************************************************************/

    /**
     * Get the first achievement for an achievmentSet
     * @param String $p_set_id The achievementSet ID
     * @return Array The first achievement information
     */
    public function getFirstAchievementForSet($p_set_id){

        $position = 1;

        $stmt = $this->adapter->conn->prepare(
            "SELECT A.id,A.points,A.name,A.description,A.next,A.position,A.total,A.set_id,S.name as set_name,S.description as set_description ".
            "FROM ACHIEVEMENT A LEFT JOIN ACHIEVEMENT_SET S ".
            "ON A.set_id = S.id ".
            "WHERE A.position = ? AND A.set_id = ?;");

        $stmt->bindParam(1,$position);
        $stmt->bindParam(2,$p_set_id);
        
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);

        }catch(PDOException $e){
            return null;
        }
        
        return $result[0];

    }
    /** 
     * Get a array of information for an achievement
     * @param String $p_achievement_id The Achievement ID
     * @return Array Achievement Info Array
     */
    public function getAchievement($p_achievement_id){
        $stmt = $this->adapter->conn->prepare(
            "SELECT A.pic_path,".
            "A.id,".
            "A.points,".
            "A.name,".
            "A.description,".
            "A.next,".
            "A.position,".
            "A.total,".
            "A.set_id,".
            "S.name as set_name,".
            "S.description as set_description ".
            "FROM ACHIEVEMENT A LEFT JOIN ACHIEVEMENT_SET S ".
            "ON A.set_id = S.id ".
            "WHERE A.id = ?;");
        $stmt->bindParam(1,$p_achievement_id);
        
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        
        if($result == null){

            return array();
        }
        
        return $result[0];
    }

    /** 
     * Get a array of all achievement information
     * @return Array Achievement Info Array for all achievements
     */
    public function getAllAchievements(){
        $stmt = $this->adapter->conn->prepare(
            "SELECT A.id,A.points,A.name,A.description,A.next,A.position,A.total,A.set_id,S.name as set_name,S.description as set_description ".
            "FROM ACHIEVEMENT A LEFT JOIN ACHIEVEMENT_SET S ".
            "ON A.set_id = S.id;");
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e) {
            return null;
        }
        
        return $result;
    }

    /** 
     * Get a list of achievements for an achievementSet
     * @param String $p_achievementSet_id The AchievementSet ID
     * @return Array Achievement infor array for a set
     */
    public function getAllAchievementForSet($p_achievementSet_id){
        $stmt = $this->adapter->conn->prepare(
            "SELECT A.id,A.points,A.name,A.description,A.next,A.position,A.total,A.set_id,A.pic_path,S.name as set_name,S.description as set_description ".
            "FROM ACHIEVEMENT A LEFT JOIN ACHIEVEMENT_SET S ".
            "ON A.set_id = S.id ".
            "WHERE A.set_id = ? ORDER BY A.position;");
        $stmt->bindParam(1,$p_achievementSet_id);
        
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        
        return $result;
    }

    /** (Possibly deprecated)
     * Check the achievement id if it exists
     * @param String $p_achievement_id The Achievement ID
     * @return Array $result achievement Id if exists, else null
     */
    public function checkAchievementId($p_achievement_id){
        $stmt = $this->adapter->conn->prepare(
            "SELECT achievement_id ".
            "FROM ACHIEVEMENT ".
            "WHERE achievement_id = ?;");
        $stmt->bindParam(1,$p_achievement_id);
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        return $result;
    }
    
    /**
     * Adds achievement to the set
     * @param String $p_achievement_id
     * @param String $p_set_id
     */
    public function addAchievementToSet($p_achievement_id,$p_set_id){
        #update total for each achievement for the set in ACHIEVEMENT table
        $stmt1 = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT SET total = (total + 1)  WHERE set_id = ? AND id <> ?;");
        #update total for each achievement record for the set in ACHIEVEMENT SET
        $stmt2 = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT_RECORD SET total = (total + 1)  WHERE set_id = ?;");
        #Get the info of the last achievement of the set
        $stmt3 = $this->adapter->conn->prepare("SELECT * FROM ACHIEVEMENT WHERE position = total-1 AND set_id = ? AND id <> ?;");
        #Set the new achievement id as the last achievement's next in ACHIEVEMENT table
        $stmt4 = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT SET next = ? WHERE position = total-1 AND set_id = ? AND id <> ?;");
        #Set the new achievement id as the last achievement's next in ACHIEVEMENT_RECORD table (if any pets already achieved the last achievement of the set)
        $stmt5 = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT_RECORD SET next = ? WHERE total-1 = position AND set_id = ?;");
        #Set the new ahcievement as the last achievment of the set in ACHIEVEMENT table
        $stmt6 = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT SET position = ?, total = ?, set_id =? WHERE id = ?;");
        #Set the new ahcievement as the last achievment of the set in ACHIEVEMENT_RECORD table (if any pets already achieved the last achievement of the set)
        $stmt7 = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT_RECORD SET position = ?, total = ?, set_id =? WHERE achievement_id = ?;");


        $this->adapter->conn->beginTransaction();

        $stmt1->bindParam(1,$p_set_id);
        $stmt1->bindParam(2, $p_achievement_id);

        $stmt2->bindParam(1,$p_set_id);

        $stmt3->bindParam(1,$p_set_id);
        $stmt3->bindParam(2,$p_achievement_id);
        try{
             
            $result = $this->adapter->executeUpdatePrepared($stmt1);
            $result = $this->adapter->executeUpdatePrepared($stmt2);
            $result2 = $this->adapter->executeFetchPrepared($stmt3)[0];
            
            $stmt4->bindParam(1,$p_achievement_id);
            $stmt4->bindParam(2,$p_set_id);
            $stmt4->bindParam(3,$p_achievement_id);
            
            $result = $this->adapter->executeUpdatePrepared($stmt4);

            $stmt5->bindParam(1,$p_achievement_id);
            $stmt5->bindParam(2,$p_set_id);
            $result = $this->adapter->executeUpdatePrepared($stmt5);

            $stmt6->bindParam(1,$result2['total']);
            $stmt6->bindParam(2,$result2['total']);
            $stmt6->bindParam(3,$result2['set_id']);
            $stmt6->bindParam(4,$p_achievement_id);
            //$result = $this->adapter->executeUpdatePrepared($stmt6);


            // get these by executing achievement id instead
            $stmt7->bindParam(1,$result2['total']);
            $stmt7->bindParam(2,$result2['total']);
            $stmt7->bindParam(3,$result2['set_id']);
            $stmt7->bindParam(4,$p_achievement_id);
            //$result = $this->adapter->executeUpdatePrepared($stmt7);

            $success = $this->adapter->conn->commit();

        }catch(PDOException $e){
            $this->adapter->conn->rollBack();
            return false;
        }catch(ErrorException $e){
            $this->adapter->conn->rollBack();
            return false;
        }catch(Exception $e){
            $this->adapter->conn->rollBack();
        	return false;
        }

        if($success){
            return true;
        }
        return false;
    }
    /**
     * Adds an achievement into the db
     * @param Integer $p_achievement_points The achievement points
     * @param String $p_achievement_name The achievement name
     * @param String $p_achievement_description The achievement description
     * @param String $p_achievement_next The next achievement in this set
     * @param Integer $p_achievement_total The total number of achievement in this set
     * @param Integer $p_achievement_position The current position in this set
     * @param String $p_achievement_setId The achievement's achievementSet's ID
     * @return String $uuid Returns a UUID if successful, else returns null
     */
    public function addAchievement($p_achievement_points,$p_achievement_name,$p_achievement_description,
        $p_achievement_next,$p_achievement_total,$p_achievement_position,$p_achievement_setId, $p_pic_path){
        
        $uuid = $this->v4();
        
        $stmt = $this->adapter->conn->prepare(
        "INSERT INTO ACHIEVEMENT(id,points,name,description,next,total,position,set_id,pic_path) ".
        "VALUES( ".
            "?,".
            "?,".
            "?,".
            "?,".
            "?,".
            "?,".
            "?,".
	        "?,".
            "?);");
        $stmt->bindParam(1,$uuid);
        $stmt->bindParam(2,$p_achievement_points);
        $stmt->bindParam(3,$p_achievement_name);
        $stmt->bindParam(4,$p_achievement_description);
        $stmt->bindParam(5,$p_achievement_next);
        $stmt->bindParam(6,$p_achievement_total);
        $stmt->bindParam(7,$p_achievement_position);
        $stmt->bindParam(8,$p_achievement_setId);
	    $stmt->bindParam(9,$p_pic_path);
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        //If successfully inserted, return the UUID, else return null
        if($result > 0) {
            return $uuid;
        }
        return null;  
    }

    /**
     * Update the position of an achievement in a set
     * @param String $p_achievement_id The achievement ID
     * @param String $p_achievement_position The new desired position of the achievement
     * @return Boolean Returns true if deleted successfully, false otherwise
     */
    public function reorderAchievementSet($p_achievement_id, $p_achievement_position){
        # Get the achievements we are going to change
        # Achievement we are moving (where id = the current achievement we are re-ordering)
        $stmt1 = $this->adapter->conn->prepare("SELECT * FROM ACHIEVEMENT WHERE id = ?;");

        # Achievement that we are taking it's place
        $stmt4 = $this->adapter->conn->prepare("SELECT * FROM ACHIEVEMENT WHERE position = ? AND set_id = ?;");

        # Update the positions of the achievements to reflect the re-ordering (MOVING EARLIER IN THE LIST)
        $stmt6 = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT SET position = (position + 1) WHERE position >= ? AND position < ? AND set_id = ?;");
        $stmt7 = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT_RECORD SET position = (position + 1) WHERE position >= ? AND position < ? AND set_id = ?;");

        # Update the positions of the achievements to reflect the re-ordering (MOVING FURTHER IN THE LIST)
        $stmt6A = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT SET position = (position - 1) WHERE position <= ? AND position > ? AND set_id = ?;");
        $stmt7A = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT_RECORD SET position = (position - 1) WHERE position <= ? AND position > ? AND set_id = ?;");

        # Update the achievement before the old position to point to the achievement after the achievement old position
        $stmt8 = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT SET next = ? WHERE next = ?;");
        $stmt9 = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT_RECORD SET next = ? WHERE next = ?;");

        # Update the achievement before the new position to point to the achievement after the achievement new position
        $stmt10 = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT SET next = ? WHERE next = ?;");
        $stmt11 = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT_RECORD SET next = ? WHERE next = ?;");

        $stmt10A = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT SET next = ? WHERE id = ?;");
        $stmt11A = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT_RECORD SET next = ? WHERE achievement_id = ?;");

        # Update the achievement we are changing with the new information
        $stmt12 = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT SET next = ?, position = ? WHERE id = ?;");
        $stmt13 = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT_RECORD SET next = ?, position = ? WHERE achievement_id = ?;");

        # Begin the transaction
        $this->adapter->conn->beginTransaction();



        try{
            $stmt1->bindParam(1,$p_achievement_id);
            $result = $this->adapter->executeFetchPrepared($stmt1);
            if (isset($result[0])){
                $current_achievement = $result[0];
            }else{
                throw new Exception('Achievement Does Not Exist1');
            }

            if ($current_achievement['position'] == $p_achievement_position){
                throw new Exception('Why are you setting the new position to current position?');
            }
            if ($current_achievement['total'] < $p_achievement_position){
                throw new Exception('Why are you setting the new position to an impossible position?');
            }

            $stmt4->bindParam(1,$p_achievement_position);
            $stmt4->bindParam(2,$current_achievement['set_id']);
            $result = $this->adapter->executeFetchPrepared($stmt4);
            
            if (isset($result[0])){
                $new_achievement_position = $result[0];
            }else{
                throw new Exception('Achievement Does Not Exist4');
            }

            //var_dump($current_achievement);
            //var_dump($old_achievement_next);

            //UPDATE THE POSITIONS BASED ON ACHIEVEMENT MOVEMENT
            if ($p_achievement_position > $current_achievement['position']){
                $stmt6A->bindParam(1,$p_achievement_position);
                $stmt6A->bindParam(2,$current_achievement['position']);
                $stmt6A->bindParam(3,$current_achievement['set_id']);
                $result = $this->adapter->executeUpdatePrepared($stmt6A);

                $stmt7A->bindParam(1,$p_achievement_position);
                $stmt7A->bindParam(2,$current_achievement['position']);
                $stmt7A->bindParam(3,$current_achievement['set_id']);
                $result = $this->adapter->executeUpdatePrepared($stmt7A);
            } else {
                $stmt6->bindParam(1,$p_achievement_position);
                $stmt6->bindParam(2,$current_achievement['position']);
                $stmt6->bindParam(3,$current_achievement['set_id']);
                $result = $this->adapter->executeUpdatePrepared($stmt6);

                $stmt7->bindParam(1,$p_achievement_position);
                $stmt7->bindParam(2,$current_achievement['position']);
                $stmt7->bindParam(3,$current_achievement['set_id']);
                $result = $this->adapter->executeUpdatePrepared($stmt7);
            }
            
            //CHECK IF WE ARE MOVING THE LAST NODE, IF WE ARE SET THE SECOND LAST TO POINT TO NULL
            //IF NOT HAVE THE SECOND LAST NODE POINT TO THE NEXT ACHIEVEMENT
            if ($current_achievement['position'] != $current_achievement['total']){
                $stmt8->bindParam(1,$current_achievement['next']);
                $stmt8->bindParam(2,$current_achievement['id']);
                $result = $this->adapter->executeUpdatePrepared($stmt8);

                $stmt9->bindParam(1,$current_achievement['next']);
                $stmt9->bindParam(2,$current_achievement['id']);
                $result = $this->adapter->executeUpdatePrepared($stmt9);
            }else{
                $stmt8->bindParam(1,$PDOSUCKS, PDO::PARAM_NULL);
                $stmt8->bindParam(2,$current_achievement['id']);
                $result = $this->adapter->executeUpdatePrepared($stmt8);

                $stmt9->bindParam(1,$PDOSUCKS, PDO::PARAM_NULL);
                $stmt9->bindParam(2,$current_achievement['id']);
                $result = $this->adapter->executeUpdatePrepared($stmt9);
            }

            //IF WE ARENT MOVING TO THE FIRST POSITION 
            //THEN UPDATE THE NEXT VALUES OF THE NODE BEFORE THE NEW POSITION
            if ($p_achievement_position != 1){
                if ($p_achievement_position != $current_achievement['total']){
                    $stmt10->bindParam(2,$new_achievement_position['next']);
                    $stmt10->bindParam(1,$current_achievement['id']);
                    $result = $this->adapter->executeUpdatePrepared($stmt10);

                    $stmt11->bindParam(2,$new_achievement_position['next']);
                    $stmt11->bindParam(1,$current_achievement['id']);
                    $result = $this->adapter->executeUpdatePrepared($stmt11);
                }else{
                    $stmt10A->bindParam(2,$new_achievement_position['id']);
                    $stmt10A->bindParam(1,$current_achievement['id']);
                    $result = $this->adapter->executeUpdatePrepared($stmt10A);
                    
                    $stmt11A->bindParam(2,$new_achievement_position['id']);
                    $stmt11A->bindParam(1,$current_achievement['id']);
                    $result = $this->adapter->executeUpdatePrepared($stmt11A);
                }
            }


            if ($current_achievement['position'] < $p_achievement_position){
                $stmt12->bindParam(1,$new_achievement_position['next']);
                $stmt13->bindParam(1,$new_achievement_position['next']);
            }else{
                $stmt12->bindParam(1,$new_achievement_position['id']);
                $stmt13->bindParam(1,$new_achievement_position['id']);
            }
            $stmt12->bindParam(2,$p_achievement_position);
            $stmt12->bindParam(3,$current_achievement['id']);
            $result = $this->adapter->executeUpdatePrepared($stmt12);

            
            $stmt13->bindParam(2,$p_achievement_position);
            $stmt13->bindParam(3,$current_achievement['id']);
            $result = $this->adapter->executeUpdatePrepared($stmt13);
            
            # Commit and check if it a success
            $success = $this->adapter->conn->commit();
        }catch(PDOException $e){
             $this->adapter->conn->rollBack();
            return false;
        }catch(ErrorException $e){
             $this->adapter->conn->rollBack();
            return false;
        }catch(Exception $e){
             $this->adapter->conn->rollBack();
            return false;
        }
        if($success){
            return true;
        }
        return false;

    }

    /**
     * Deletes an achievement from the database and propogate the deletion
     * @param String $p_achievement_id The achievement ID
     * @return Boolean Returns true if deleted successfully, false otherwise
     */
    public function deleteAchievement($p_achievement_id){
        $stmt1 = $this->adapter->conn->prepare("SELECT next FROM ACHIEVEMENT WHERE id = ?;");
        $stmt2 = $this->adapter->conn->prepare("SELECT position FROM ACHIEVEMENT WHERE id = ?;");
        $stmt3 = $this->adapter->conn->prepare("SELECT set_id FROM ACHIEVEMENT WHERE id = ?;");
        $stmt4 = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT_RECORD SET next = ? WHERE next = ?;");
        $stmt5 = $this->adapter->conn->prepare("UPDATE ACHIEVEMENT_RECORD SET position = (position - 1) WHERE set_id = ? AND position > ?;");
        $stmt6= $this->adapter->conn->prepare("UPDATE ACHIEVEMENT_RECORD SET total = (total - 1) WHERE set_id = ?;");
        $stmt7= $this->adapter->conn->prepare("UPDATE ACHIEVEMENT SET next = ? WHERE next = ?;");
        $stmt8= $this->adapter->conn->prepare("UPDATE ACHIEVEMENT SET position = (position - 1) WHERE set_id = ? AND position > ?;");
        $stmt9= $this->adapter->conn->prepare("UPDATE ACHIEVEMENT SET total = (total - 1) WHERE set_id = ?;");
        $stmt10 = $this->adapter->conn->prepare("DELETE FROM ACHIEVEMENT_RECORD WHERE achievement_id = ?;");
        $stmt11 = $this->adapter->conn->prepare("DELETE FROM MAIL WHERE achievement_id = ?;");
        $stmt12 = $this->adapter->conn->prepare("DELETE FROM ACHIEVEMENT WHERE id = ?;");
        $this->adapter->conn->beginTransaction();
        
        $stmt1->bindParam(1,$p_achievement_id);
        $stmt2->bindParam(1,$p_achievement_id);
        $stmt3->bindParam(1,$p_achievement_id);
        $stmt10->bindParam(1,$p_achievement_id);
        $stmt11->bindParam(1,$p_achievement_id);
        $stmt12->bindParam(1,$p_achievement_id);

        try{
            $result = $this->adapter->executeFetchPrepared($stmt1);
            if (isset($result[0])){
            	$next = $result[0]['next'];
            }else{
            	throw new Exception('Achievement Does Not Exist');
            }
            
            $result = $this->adapter->executeFetchPrepared($stmt2);
            if (isset($result[0])){
            	$position = $result[0]['position'];
            }else{
            	throw new Exception('Achievement Does Not Exist');
            }
    
            $result = $this->adapter->executeFetchPrepared($stmt3);
            if (isset($result[0])){
            	$set_id = $result[0]['set_id'];
            }else{
            	throw new Exception('Achievement Does Not Exist');
            }
            
            $stmt4->bindParam(1,$next);
        	$stmt4->bindParam(2,$p_achievement_id);
            $result = $this->adapter->executeUpdatePrepared($stmt4);

            $stmt5->bindParam(1,$set_id);
        	$stmt5->bindParam(2,$position);
            $result = $this->adapter->executeUpdatePrepared($stmt5);

            $stmt6->bindParam(1,$set_id);
            $result = $this->adapter->executeUpdatePrepared($stmt6);

            $stmt7->bindParam(1,$next);
            $stmt7->bindParam(2,$p_achievement_id);
            $result = $this->adapter->executeUpdatePrepared($stmt7);

            $stmt8->bindParam(1,$set_id);
        	$stmt8->bindParam(2,$position);
            $result = $this->adapter->executeUpdatePrepared($stmt8);

            $stmt9->bindParam(1,$set_id);
            $result = $this->adapter->executeUpdatePrepared($stmt9);

            $result = $this->adapter->executeUpdatePrepared($stmt10);
            $result = $this->adapter->executeUpdatePrepared($stmt11);
            $result = $this->adapter->executeUpdatePrepared($stmt12);
            $success = $this->adapter->conn->commit();
        }catch(PDOException $e){
            $this->adapter->conn->rollBack();
            return false;
        }catch(ErrorException $e){
            $this->adapter->conn->rollBack();
        	return false;
        }catch(Exception $e){
            $this->adapter->conn->rollBack();
        	return false;
        }
        if($success){
            return true;
        }
        return false;
    }


   /**
     * Update an achievement points
     * @param String $p_achievement_id The achievement ID
     * @param String $p_achievement_points The achievement points
     * @return Boolean Returns true if deleted successfully, false otherwise
     */
    public function editAchievementPoints($p_achievement_id,$p_achievement_points){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE ACHIEVEMENT SET POINTS=? ".
            "WHERE ID = ?");
        $stmt->bindParam(1,$p_achievement_points);
        $stmt->bindParam(2,$p_achievement_id);
        
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0){
            return true;
        }
        return false;
    }

    /**
     * Update an achievement name
     * @param String $p_achievement_id The achievement ID
     * @param String $p_achievement_name The achievement name
     * @return Boolean Returns true if deleted successfully, false otherwise
     */
    public function editAchievementName($p_achievement_id,$p_achievement_name){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE ACHIEVEMENT SET NAME=? ".
            "WHERE ID = ?");
        $stmt->bindParam(1,$p_achievement_name);
        $stmt->bindParam(2,$p_achievement_id);
        
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0){
            return true;
        }
        return false;
    }
    
    /**
     * Update an achievement description
     * @param String $p_achievement_id The achievement ID
     * @param String $p_achievement_description The achievement description
     * @return Boolean Returns true if deleted successfully, false otherwise
     */
    public function editAchievementDescription($p_achievement_id,$p_achievement_description){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE ACHIEVEMENT SET DESCRIPTION=? ".
            "WHERE ID = ?");
        $stmt->bindParam(1,$p_achievement_description);
        $stmt->bindParam(2,$p_achievement_id);
        
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0){
            return true;
        }
        return false;
    }
       
    /**
     * Update an achievement next
     * @param String $p_achievement_id The achievement ID
     * @param String $p_achievement_next The achievement next
     * @return Boolean Returns true if deleted successfully, false otherwise
     */
    public function editAchievementNext($p_achievement_id,$p_achievement_next){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE ACHIEVEMENT SET NEXT=? ".
            "WHERE ID = ?");
        $stmt->bindParam(1,$p_achievement_next);
        $stmt->bindParam(2,$p_achievement_id);
        
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0){
            return true;
        }
        return false;
    }
      
    /**
     * Update an achievement total
     * @param String $p_achievement_id The achievement ID
     * @param String $p_achievement_total The achievement total
     * @return Boolean Returns true if deleted successfully, false otherwise
     */
    public function editAchievementTotal($p_achievement_id,$p_achievement_total){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE ACHIEVEMENT SET TOTAL=? ".
            "WHERE ID = ?");
        $stmt->bindParam(1,$p_achievement_total);
        $stmt->bindParam(2,$p_achievement_id);
        
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0){
            return true;
        }
        return false;
    }
       
    /**
     * Update an achievement position
     * @param String $p_achievement_id The achievement ID
     * @param String $p_achievement_position The achievement position
     * @return Boolean Returns true if deleted successfully, false otherwise
     */
    public function editAchievementPosition($p_achievement_id,$p_achievement_position){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE ACHIEVEMENT SET POSITION=? ".
            "WHERE ID = ?");
        $stmt->bindParam(1,$p_achievement_position);
        $stmt->bindParam(2,$p_achievement_id);
        
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0){
            return true;
        }
        return false;
    }


    public function editAchievementPicPath($p_achievement_id, $p_achievement_src) {
        $stmt = $this->adapter->conn->prepare(
            "UPDATE ACHIEVEMENT SET PIC_PATH=? ".
            "WHERE ID=?");
        $stmt->bindParam(1, $p_achievement_src);
        $stmt->bindParam(2, $p_achievement_id);
        try {
            return $this->adapter->executeUpdatePrepared($stmt) > 0;
        } catch (PDOException $e) {
            return false;
        }
    }
    
    /**
     * Update an achievement SetId
     * @param String $p_achievement_id The achievement ID
     * @param String $p_achievement_setId The achievement setId
     * @return Boolean Returns true if deleted successfully, false otherwise
     */
    public function editAchievementSetId($p_achievement_id,$p_achievement_setId){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE ACHIEVEMENT SET SET_ID=? ".
            "WHERE ID = ?");
        $stmt->bindParam(1,$p_achievement_setId);
        $stmt->bindParam(2,$p_achievement_id);
        
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0){
            return true;
        }
        return false;
    }


    /**
     * Replace the species associated with the achievement set identified by
     * the given id with the list of species passed.
     * @param String $p_set_id The id of the achievement set whose species
     * are to be edited.
     * @param Array $p_species_list Array of associative array each of which
     * has a key 'id' whose value is the id of a species.
     * NOTE: incumbent upon caller to remove duplicate ids from the species
     * list.  Will faill if duplicates exist.
     */
    public function replaceSpeciesListForSet($p_set_id, $p_species_list) {

        // Insertion statement
        $stmt = "INSERT INTO SPECIES_ACHIEVEMENT_SET VALUES ";

        // Get statement, used for comparason with deletion statement
        $getStmt = $this->adapter->conn->prepare(
            "SELECT species_id FROM SPECIES_ACHIEVEMENT_SET WHERE set_id = ?");

        // Deletion statement
        $deleteStmt = $this->adapter->conn->prepare(
            "DELETE FROM SPECIES_ACHIEVEMENT_SET WHERE set_id = ?");

        // Begin transaction
        $this->adapter->conn->beginTransaction();

        $getStmt->bindParam(1, $p_set_id);
        $deleteStmt->bindParam(1, $p_set_id);

        try {
            // Fun fact: if both queries below fail, we won't have any idea
            // unless a row which failed to be deleted has a species_id equal
            // to one we are trying to insert.
            $getResult = $this->adapter->executeUpdatePrepared($getStmt);
            $deleteResult = $this->adapter->executeUpdatePrepared($deleteStmt);

            if ($getResult != $deleteResult) {
                throw new PDOException("Deletion failed.");
            }

            for ($i = 0; $i < sizeof($p_species_list); $i++) {
                $speciesId = $p_species_list[$i]['id'];
                $stmt = $stmt . "('" . $speciesId . "', '" . $p_set_id . "')";

                if ($i == sizeof($p_species_list) - 1) {
                    $stmt = $stmt . ";";
                } else {
                    $stmt = $stmt . ", ";
                }
            }

            // Attempt update
            $stmtObj = $this->adapter->conn->prepare($stmt);
            $result = $this->adapter->executeUpdatePrepared($stmtObj);

            // If number of rows inserted 
            if ($result != sizeof($p_species_list)) {
                throw new PDOException("Insertion failed.");
            }
        } catch (PDOException $e) {
            return false;
        } catch(ErrorException $e) {
            return false;
        } catch(Exception $e) {
            return false;
        }        

        if ($this->adapter->conn->commit()) return true;
        else return false;
    }

    /** 
     * @deprecated
     * Adding a new achievement template
     * @param String $p_name Name of the achievement
     * @param int $p_points The number of points it carries
     * @param String $p_description The description
     * @return boolean $result Returns true if successful, false otherwise
     */
    public function addAchievementTemplate($p_name, $p_points, $p_description){
        $stmt = $this->adapter->conn->prepare(
            "INSERT INTO ACHIEVEMENT VALUES(".
            "?,".
            "?,".
            "?);");
        $stmt->bindParam(1,$p_name);
        $stmt->bindParam(2,$p_points);
        $stmt->bindParam(3,$p_description);
        
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }

        if($result > 0) {
            return true;
        }else{
            return false;    
        }
    }

    /**************************************************************************
    *
    *    Achievement Record Methods
    *
    /**************************************************************************/

    /**
     * Add a new achievement record for a pet
     * @param String $p_pet_id Pet ID
     * @param String $p_achievement_id Achievement ID
     * @param String $p_clinic_id Clinic ID
     * @return boolean $result Returns true if successful, false otherwise 
     */
    public function addAchievementRecord($p_pet_id,$p_achievement_id, $p_clinic_id){

        $stmt = $this->adapter->conn->prepare(
            "INSERT INTO ACHIEVEMENT_RECORD(".
            "achievement_id,".
            "pet_id,".
            "clinic_id,".
            "next,".
            "total,".
            "position,".
            "set_id,".
            "points) ".
            "SELECT A.id as achievement_id,".
            "? AS pet_id,".
            "? AS clinic_id,".
            "A.next,".
            "A.total,".
            "A.position,".
            "A.set_id,".
            "A.points ".
            "FROM ACHIEVEMENT A ".
            "WHERE A.id = ?;");

        $stmt->bindParam(1,$p_pet_id);
        $stmt->bindParam(2,$p_clinic_id);
        $stmt->bindParam(3,$p_achievement_id);

        try{

            $result = $this->adapter->executeUpdatePrepared($stmt);
            
        }catch(PDOException $e){
            return false;
        }

        if($result > 0) {
            return true;
        }
        return false;
    }
    

    /**
     * Delete an achievement record based on pet ID and set ID and take points off
     * @param String $p_pet_id Pet ID
     * @param String $p_set_id Set ID
     * @return Boolean Returns true if it is deleted successfully,else false
     */

    /*Update the points for the pet*/
    public function deleteAchievementRecord($p_pet_id,$p_set_id){
        
        $stmt1 = $this->adapter->conn->prepare(
            "UPDATE PET SET points = ( points - (SELECT points FROM ACHIEVEMENT_RECORD WHERE ".
			"pet_id = ? ".
			"AND set_id = ? ".
            "AND position = (SELECT MAX(position) FROM ACHIEVEMENT_RECORD WHERE pet_id = ? AND set_id = ? )))".
            "WHERE pet_id = ?;");
        
        /*Update the net points for the pet owner*/
        $stmt2 = $this->adapter->conn->prepare(
            "UPDATE OWNER SET net_points = (net_points - (SELECT points FROM ACHIEVEMENT_RECORD WHERE ".
			"pet_id = ? ".
			"AND set_id = ? ".
            "AND position = (SELECT MAX(position) FROM ACHIEVEMENT_RECORD WHERE pet_id = ? AND set_id = ? )))".
            "WHERE email = (SELECT owner_id FROM PET WHERE pet_id = ? );"
        );

        
        /*Delete the record with highest postion for set for pet*/
        $stmt3 = $this->adapter->conn->prepare(
            "DELETE FROM ACHIEVEMENT_RECORD WHERE pet_id = ? ".
            "AND set_id = ? ".
            "AND position = ".
            "(SELECT pos FROM (SELECT MAX(position) AS pos FROM ACHIEVEMENT_RECORD WHERE pet_id = ? AND set_id = ? ) AS TEMP);"
        );

        try{
            $this->adapter->conn->beginTransaction();

            $stmt1->bindParam(1,$p_pet_id);
            $stmt1->bindParam(2,$p_set_id);
            $stmt1->bindParam(3,$p_pet_id);
            $stmt1->bindParam(4,$p_set_id);
            $stmt1->bindParam(5,$p_pet_id);
            
            $result = $this->adapter->executeUpdatePrepared($stmt1);

            $stmt2->bindParam(1,$p_pet_id);
            $stmt2->bindParam(2,$p_set_id);
            $stmt2->bindParam(3,$p_pet_id);
            $stmt2->bindParam(4,$p_set_id);
            $stmt2->bindParam(5,$p_pet_id);

            $result = $this->adapter->executeUpdatePrepared($stmt2);
            
            $stmt3->bindParam(1,$p_pet_id);
            $stmt3->bindParam(2,$p_set_id);
            $stmt3->bindParam(3,$p_pet_id);
            $stmt3->bindParam(4,$p_set_id);

            $result = $this->adapter->executeUpdatePrepared($stmt3);

            $success = $this->adapter->conn->commit();
            
        }catch(PDOException $e){
            $this->adapter->conn->rollBack();
            return false;

        }catch(ErrorException $e) {
            $this->adapter->conn->rollBack();
            return false;
        }

        if($success) {
            return true;
        }
        return false;
    }

    /**
     * Decrease the total for each achievement record by 1
     * @param String $p_set_id Set ID
     * @return Boolean Returns true if the operation is successful, else false
     */
    public function decreaseAchievementRecordTotal($p_set_id){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE ACHIEVEMENT_RECORD SET total = total - 1 WHERE set_id = ?;"
        );

        $stmt->bindParam($p_set_id);
        try{

            $result = $this->adapter->executeUpdatePrepared($stmt);

        }catch(PDOException $e){
            return false;

        }catch(ErrorException $e) {
            return false;
        }

        if($result > 0) {
            return true;
        }
        return false;

    }

    /**
     * Increase the total for each achievement record by 1
     * @param String $p_pet_id Set ID
     * @return Boolean Returns true if the operation is successful, else false
     */
    public function increaseAchievementRecordTotal($p_set_id){

        $stmt = $this->adapter->conn->prepare(
            "UPDATE ACHIEVEMENT_RECORD SET total = total + 1 WHERE set_id = ?;"
        );

        $stmt->bindParam($p_set_id);
        try{

            $result = $this->adapter->executeUpdatePrepared($stmt);

        }catch(PDOException $e){
            return false;

        }catch(ErrorException $e) {
            return false;
        }

        if($result > 0) {
            return true;
        }
        return false;
    }

    /**
     * Update the total points for a specific pet
     * @param String $p_achievement_id Achievement ID
     * @param String $p_pet_id Pet ID
     * @return Boolean Returns true if the operation is successful, else false
     */
    public function updatePetPoints($p_achievement_id, $p_pet_id){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE PET SET points = (points + (SELECT points FROM ACHIEVEMENT_RECORD WHERE achievement_id = ? AND pet_id = ?)) WHERE pet_id = ?".
            ";");
        $stmt->bindParam(1,$p_achievement_id);
        $stmt->bindParam(2,$p_pet_id);
        $stmt->bindParam(3,$p_pet_id);
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }

        return $result > 0;
    }

    /**
     * Update the net points for a specific owner 
     * @param String $p_owner_id Owner ID
     * @return String Boolean Returns true if the operation is successful, else false
     */ 
    public function updateOwnerNetPoints($p_achievement_id,$p_pet_id){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE OWNER SET net_points = (net_points + (SELECT points FROM ACHIEVEMENT_RECORD WHERE achievement_id = ? AND pet_id = ?)) ".
            "WHERE email = (SELECT owner_id FROM PET WHERE pet_id = ?);");
        $stmt->bindParam(1,$p_achievement_id);
        $stmt->bindParam(2,$p_pet_id);
        $stmt->bindParam(3,$p_pet_id);
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }

        return $result > 0;
    }

    /**
     * Get the latest achievement records for each set for a specific pet.
     * Function will only return the set information if the pet doesn't have 
     * any achievements for the sets that it is eligible for.
     * @param String $p_pet_id Pet Id
     * @return Array Returns array of achievement record array, .
     */
    public function getLatestAchievementRecordsForPet($p_pet_id){
        $stmt = $this->adapter->conn->prepare(
            "SELECT RECORDS.*,".
       		"A2.total AS next_total,".
            "A2.points AS next_points,".
            "A2.pic_path AS next_pic_path,".
            "A2.position AS next_position,".
            "A2.name AS next_name,".
            "A2.description AS next_description,".
            "S.name AS set_name,".
            "S.description AS set_description,PO.current_points,PO.total_set_points FROM ".
            "(SELECT sum(IFNULL(AR.points,0)) AS current_points,".
            "sum(A.points) AS total_set_points,".
            "A.set_id AS p_set_id FROM ".
            "(SELECT set_id FROM PET P JOIN SPECIES_ACHIEVEMENT_SET SA ON P.species_id = SA.species_id WHERE P.pet_id = ? ) AS SETS ".
            "JOIN ACHIEVEMENT A ON SETS.set_id = A.set_id LEFT JOIN ACHIEVEMENT_RECORD AR ON A.id = AR.achievement_id GROUP BY A.set_id ) AS PO ".
            "JOIN ".
            "(SELECT P.pet_id, SAS.set_id ".
            "FROM PET P ".
            "JOIN SPECIES SP ON P.species_id = SP.id ".
            "JOIN SPECIES_ACHIEVEMENT_SET SAS ON SP.id = SAS.species_id ". 
            "WHERE P.pet_id = ? ) SETS ".
            "ON PO.p_set_id = SETS.set_id ".
            "JOIN ACHIEVEMENT_SET S ON S.id = SETS.set_id ".
            "LEFT JOIN (SELECT A.*, AR.pet_id, AR.clinic_id, AR.points AS record_points, AR.dates ".
            "FROM (SELECT * FROM ACHIEVEMENT_RECORD WHERE pet_id = ?) AR ".
            "RIGHT JOIN ACHIEVEMENT A ON AR.achievement_id = A.id ".
            "WHERE A.position = (SELECT IFNULL(MAX(position),1) FROM ACHIEVEMENT_RECORD WHERE set_id = A.set_id AND pet_id = ? )".
            ") RECORDS ON RECORDS.set_id = SETS.set_id LEFT JOIN ACHIEVEMENT A2 ON RECORDS.next = A2.id;");
        
        $stmt->bindParam(1,$p_pet_id);
        $stmt->bindParam(2,$p_pet_id);
        $stmt->bindParam(3,$p_pet_id);
        $stmt->bindParam(4,$p_pet_id);

        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
     	}catch(PDOException $e){
            return null;
        }

        if($result > 0){
            return $result;
        }
        return null;
    }
 
    /**
     * Get an achievement record by pet ID and achievement ID
     * @param String $p_pet_id Pet ID.
     * @param String $p_achievement_id Achievement ID.
     * @return Array Returns array of achievement record attributes if successful,else null.
     */
    public function getAchievementRecord($p_pet_id,$p_achievement_id){

        $stmt = $this->adapter->conn->prepare(
            "SELECT AR.achievement_id AS id,".
            "AR.dates,".
            "AR.pet_id,".
            "AR.clinic_id,".
            "AR.points,".
            "A.name,".
            "A.pic_path,".
            "A.description,".
            "AR.next,".
            "A.position,".
            "AR.total,".
            "AR.set_id,".
            "S.name as set_name,S.description as set_description ".
            "FROM ACHIEVEMENT A, ACHIEVEMENT_SET S,ACHIEVEMENT_RECORD AR ".
            "WHERE AR.achievement_id = ? AND AR.pet_id = ? AND A.set_id = S.id AND AR.achievement_id = A.id ;");

        $stmt->bindParam(1,$p_achievement_id);
        $stmt->bindParam(2,$p_pet_id);

        try{
            $result = $this->adapter->executeFetchPrepared($stmt);

        }catch(PDOException $e){
            return null;
        }
        if($result == 0 ){

            return array();
        }

        if($result > 0){

            return $result[0];
        }
        return null;
    }

    /**************************************************************************
    *
    *    Species Set Methods
    *
    /**************************************************************************/

    /**
     * Adding a new species to a set
     * @param String $p_species_id The species id
     * @param String $p_set_id The set id to be added to
     * @return Boolean Returns True is successfull false otherwise
     */
    public function addSpeciesToSet($p_species_id, $p_set_id){
        $stmt = $this->adapter->conn->prepare(
            "INSERT INTO SPECIES_ACHIEVEMENT_SET(species_id,set_id) ".
            "VALUES(".
            "?,".
            "?);");
            $stmt->bindParam(1,$p_species_id);
            $stmt->bindParam(2,$p_set_id);
            
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        
        if($result > 0) {
            return true;
        }else{
            return false;    
        }
    }

    /**************************************************************************
    *
    *    Species Methods
    *
    /**************************************************************************/    

    /**
     * Get all species
     * @return Array Returns array of all species
     */
    public function getAllSpecies(){
        $stmt = $this->adapter->conn->prepare(
            "SELECT * ".
            "FROM SPECIES;");
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        return $result;
    }

    /**
     * Get a specific species
     * @param String $p_species_id The specific species ID
     * @return Array $result Returns species info
     */
    public function getSpecies($p_species_id){
        $stmt = $this->adapter->conn->prepare(
            "SELECT * ".
            "FROM SPECIES ".
            "WHERE id=?;");
            $stmt->bindParam(1,$p_species_id);

        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        
        return $result[0];
    }

    /**
     * Get a specific species ID from name
     * @param String $p_species_name The specific species name
     * @return Array $result Returns species ID
     */
    public function getSpeciesId($p_species_name){
        $stmt = $this->adapter->conn->prepare(
            "SELECT id ".
            "FROM SPECIES ".
            "WHERE name=?;");
            $stmt->bindParam(1,$p_species_name);

        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        
        return $result[0];
    }

    /**
     * Adding a new species
     * @param String $p_species_name The new species name
     * @return Boolean|String $result Returns ID if added successfully,else null
     */
    public function addSpecies($p_species_name){
        $uuid = $this->v4();

        $stmt = $this->adapter->conn->prepare(
            "INSERT INTO SPECIES(id,name) ".
            "VALUES(".
            "?,".
            "?);");
            $stmt->bindParam(1,$uuid);
            $stmt->bindParam(2,$p_species_name);
            
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        
        if($result > 0) {
            return $uuid;
        }else{
            return null;    
        }
    }

    /**
     * Edit species name
     * @param String $p_species_id The specific species ID
     * @param String $p_species_name The new species name
     * @return Boolean $result Returns true if updated successfully,else false
     */
    public function editSpeciesName($p_species_id,$p_species_name){
        $stmt = $this->adapter->conn->prepare(
            "UPDATE SPECIES SET NAME=? ".
            "WHERE ID = ?");
        $stmt->bindParam(1,$p_species_name);
        $stmt->bindParam(2,$p_species_id);
        
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return false;
        }
        if($result > 0){
            return true;
        }
        return false;
    }

    /**************************************************************************
    *
    *    Notification Methods
    *
    /**************************************************************************/

    /**
     * Removes specific notifications
     * @param String $p_ownerId The Owner ID
     * @param String $p_pet_id The pet ID
     * @param String $p_achievement_id The achievement ID
     * @return Boolean $result Returns true if removed successfully,else false
     */
    public function removeNotification($p_ownerId,$p_pet_id,$p_achievement_id){
        $stmt = $this->adapter->conn->prepare("DELETE FROM MAIL ".
            "WHERE owner_id=? ".
            "AND pet_id=? ".
            "AND achievement_id=?;");
        
        $stmt->bindParam(1,$p_ownerId);
        $stmt->bindParam(2,$p_pet_id);
        $stmt->bindParam(3,$p_achievement_id);
        try{

            $result = $this->adapter->executeUpdatePrepared($stmt);

        }catch(PDOException $e){
            return false;

        }catch(ErrorException $e) {
            return false;
        }

        if($result > 0) {
            return true;
        }
        return false;
    }

    /**
     * Get all notifications
     * @return Array $result Returns array of all notifications
     */
    public function getAllNotifications(){
        
        $stmt = $this->adapter->conn->prepare(
            "SELECT m.owner_id, p.name AS pet_name, a.name AS achievement_name, m.dates, c.name AS clinic_name, p.pet_id, a.id AS achievement_id ".
            "FROM MAIL m, ACHIEVEMENT a, PET p LEFT JOIN CLINIC c ".
            "ON c.clinic_id = p.clinic_id ".
            "WHERE m.pet_id = p.pet_id AND a.id = m.achievement_id;");
        try{
            $result = $this->adapter->executeFetchPrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        
        return $result;
    }

    /**
     * Adding a new pet into the notification list
     * @param String $p_ownerId The Pet's Owner ID
     * @param String $p_pet_id The Pet's ID
     * @param String $p_birthday The Pet's DOB
     * @param String $p_achievement_id The achievement's ID
     * @return Boolean $result Returns true if inserted successfully, else false
     */
    public function addToMail($p_ownerId,$p_pet_id,$p_birthday,$p_achievement_id){   
        //Changing $p_birthday from DateTime object into string
        $bday = $p_birthday->format('Y-m-d');

        $stmt = $this->adapter->conn->prepare(
            "INSERT INTO MAIL(owner_id,pet_id,dates,achievement_id) ".
            "VALUES(".
            "?,".
            "?,".
            "?,".
            "?);");
            $stmt->bindParam(1,$p_ownerId);
            $stmt->bindParam(2,$p_pet_id);
            $stmt->bindParam(3,$bday);
            $stmt->bindParam(4,$p_achievement_id);
            
        try{
            $result = $this->adapter->executeUpdatePrepared($stmt);
        }catch(PDOException $e){
            return null;
        }
        
        if($result > 0) {
            return true;
        }else{
            return false;    
        }    
    }



}
?>

