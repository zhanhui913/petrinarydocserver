<?php

$root = $_SERVER['DOCUMENT_ROOT'];
require_once $root . '/../sys/controller/RouteController.php';
require_once $root . '/../libs/Slim/Slim.php';

defined('NUM_HASHES') ? NULL : define('NUM_HASHES', 5);
defined('URL') ? NULL : define('URL', 'localhost');
class PasswordResetController implements RouteController {

  /** Instance of Slim application router. */
  private $app;
  /** Instance of ModelController. */
  private $mc;

  public function __construct() {
    $this->app = Slim\Slim::getInstance();
    $this->mc = new ModelController();
  }

  public function index(&$args) {
    $this->app->render('forgot-password-tpl.html');
  }

  public function create(&$args) {
    
    $email = $args['email'];

    if(!filter_var($email, FILTER_VALIDATE_EMAIL)) {
      echo json_encode(
        array(
          'wasSuccessful' => false,
          'error' => 'A valid e-mail address was not submitted.'
        )
      );
      return;
    }


    $credentials = $this->mc->checkOwnerAccount($email);

    if ($credentials == null) {
      echo json_encode(
        array(
          'wasSuccessful' => false,
          'error' => 'No account with that e-mail address exists.'
        )
      );
    } else {
      $hash = $credentials['pass'];
      for ($i = 0; $i < NUM_HASHES; $i++) {
        $hash = hash('sha512', $hash);
      }

      $subject = 'Petrinary Password Reset Request';
      $message = "Please click on the following link to reset your password.\r\n" .
       'http://' . URL . '/resetpw/'. $hash .'?email=' . $email;
      $message = wordwrap($message, 70);
      $from = 'From: petrinary@gmail.com';
      $ret = mail($email, $subject, $message, $from);
      echo json_encode(array('wasSuccessful' => $ret, 'error' => 'Mail not sent.'));
    }

  }

  public function show(&$args) {
    $hash = $args['hash'];
    $email = $args['email'];

    $credentials = $this->mc->checkOwnerAccount($email);

    if ($credentials == null) $this->app->halt(404);

    $pw = $credentials['pass'];
    for ($i = 0; $i < NUM_HASHES; $i++) {
      $pw = hash('sha512', $pw);
    }

    if ($pw == $hash) {
      // Generate random password
      $newPw = $this->generatePassword();
      $newSalt = time() . $email;

      $newHash = hash('sha512', $newSalt . $newPw);

      $ret = $this->mc->updateOwnerPassword($email, $newHash, $newSalt);
      if (!$ret) {
        $this->app->halt(500);
      } else {
        $subject = 'Petrinary Password Reset';
        $message = "Hello and thank you for using Petrinary!\r\n" .
        "Your new password is: " . $newPw . "\r\n" .
        "Welcome back to Petrinary!";
        $message = wordwrap($message, 70);
        $from = 'From: petrinary@gmail.com';
        $ret = mail($email, $subject, $message, $from);
        if (!$ret) {
          $this->app->halt(500);
        } else {
          $this->app->redirect('/login');
        }
      }
    } else {
      $this->app->halt(404);
    }

  }
  public function update(&$args) {}
  public function destroy(&$args) {}

  private function generatePassword() {
    $alphabet = "abcdefghijklmnopqrstuwxyzABCDEFGHIJKLMNOPQRSTUWXYZ0123456789";
    $pass = array(); //remember to declare $pass as an array
    $alphaLength = strlen($alphabet) - 1; //put the length -1 in cache
    for ($i = 0; $i < 8; $i++) {
        $n = rand(0, $alphaLength);
        $pass[] = $alphabet[$n];
    }
    return implode($pass); //turn the array into a string
}

}


?>
